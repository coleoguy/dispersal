library(DescTools)
PseudoR2(best.models[[1]], which = NULL)
PseudoR2(best.models[[2]], which = NULL)
help(PseudoR2)
PseudoR2(best.models[[2]], which = "Nagelkerke")
setwd("~/Desktop/Dropbox/projects/dispersal/rscripts")
########################## Untransformed Data #######################
beetle.dat <- read.csv("../data/saga.single.val.data.csv")
help("LCA")
res2 <- LCA(data=beetle.dat,
SCS="XY",parental = "calc",env=FALSE,
max.pars = 4, ret.all=F)
plot(res2)
summary(res2$best.models)
summary(res2$best.models[[1]])
help("glm")
source('~/Desktop/Dropbox/gitrepos/SAGA2/R/AnalyzeModels.R')
source('~/Desktop/Dropbox/gitrepos/SAGA2/R/LCA.R')
res2 <- LCA(data=beetle.dat,
SCS="XY",parental = "calc",env=FALSE,
max.pars = 4, ret.all=F)
source('~/Desktop/Dropbox/gitrepos/SAGA2/R/support.R')
res2 <- LCA(data=beetle.dat,
SCS="XY",parental = "calc",env=FALSE,
max.pars = 4, ret.all=F)
source('~/Desktop/Dropbox/gitrepos/SAGA2/R/PrepareCmatrix.R')
res2 <- LCA(data=beetle.dat,
SCS="XY",parental = "calc",env=FALSE,
max.pars = 4, ret.all=F)
source('~/Desktop/Dropbox/gitrepos/SAGA2/R/EvaluateModel.R')
res2 <- LCA(data=beetle.dat,
SCS="XY",parental = "calc",env=FALSE,
max.pars = 4, ret.all=F)
source('~/Desktop/Dropbox/gitrepos/SAGA2/R/support.R')
library(gtools)
res2 <- LCA(data=beetle.dat,
SCS="XY",parental = "calc",env=FALSE,
max.pars = 4, ret.all=F)
source('~/Desktop/Dropbox/gitrepos/SAGA2/R/AnalyzeModels.R')
source('~/Desktop/Dropbox/gitrepos/SAGA2/R/LCA.R')
res2 <- LCA(data=beetle.dat,
SCS="XY",parental = "calc",env=FALSE,
max.pars = 4, ret.all=F)
summary(res2$best.models)
summary(res2$best.models[[1]])
data <- beetle.dat
SCS="XY"
parental = "calc"
env=FALSE
ret.all=F
max.pars = 4
### lets deal with cross names being treated as factors
if(is.factor(data$cross)){
data$cross <- unlist(lapply(data$cross, as.character))
}
### lets deal with F in sex being treated as FALSE
if(is.logical(data$sex)){
data$sex <- rep("F", length(data$sex))
}
# validate the incoming arguments and data
validateData(SCS = SCS, user.data = data, Cmatrix = Cmatrix, messages = messages)
Cmatrix = NULL
messages = TRUE
Mepi = FALSE
model.sum = .95
env = FALSE
parental = "calc"
SCS = "XY"
### lets deal with cross names being treated as factors
if(is.factor(data$cross)){
data$cross <- unlist(lapply(data$cross, as.character))
}
### lets deal with F in sex being treated as FALSE
if(is.logical(data$sex)){
data$sex <- rep("F", length(data$sex))
}
# validate the incoming arguments and data
validateData(SCS = SCS, user.data = data, Cmatrix = Cmatrix, messages = messages)
### if no custom matrix is supplied build a cmatrix based
### on the user data and arguments supplied
if(is.null(Cmatrix)){
Cmatrix <- PrepareCmatrix(user.data = data,
SCS = SCS, env = env,
drop.pars = drop.pars,
parental = parental,
Mepi = Mepi)
}
source('~/Desktop/Dropbox/gitrepos/SAGA2/R/support.R')
source('~/Desktop/Dropbox/gitrepos/SAGA2/R/PrepareCmatrix.R')
source('~/Desktop/Dropbox/gitrepos/SAGA2/R/EvaluateModel.R')
source('~/Desktop/Dropbox/gitrepos/SAGA2/R/AnalyzeModels.R')
### if no custom matrix is supplied build a cmatrix based
### on the user data and arguments supplied
if(is.null(Cmatrix)){
Cmatrix <- PrepareCmatrix(user.data = data,
SCS = SCS, env = env,
drop.pars = drop.pars,
parental = parental,
Mepi = Mepi)
}
drop.pars = NULL
### lets deal with cross names being treated as factors
if(is.factor(data$cross)){
data$cross <- unlist(lapply(data$cross, as.character))
}
### lets deal with F in sex being treated as FALSE
if(is.logical(data$sex)){
data$sex <- rep("F", length(data$sex))
}
# validate the incoming arguments and data
validateData(SCS = SCS, user.data = data, Cmatrix = Cmatrix, messages = messages)
### if no custom matrix is supplied build a cmatrix based
### on the user data and arguments supplied
if(is.null(Cmatrix)){
Cmatrix <- PrepareCmatrix(user.data = data,
SCS = SCS, env = env,
drop.pars = drop.pars,
parental = parental,
Mepi = Mepi)
}
# remove CGEs in the cmatrix that can't be analyzed
cmat.temp <- CleanCmatrix(Cmatrix, messages=messages)
View(Cmatrix)
source('~/Desktop/Dropbox/gitrepos/SAGA2/R/LCA.R')
res2 <- LCA(data=beetle.dat,
SCS="XY",parental = "calc",env=FALSE,
max.pars = 4, ret.all=F)
View(cmat.temp)
View(Cmatrix)
source('~/Desktop/Dropbox/gitrepos/SAGA2/R/LCA.R')
res2 <- LCA(data=beetle.dat,
SCS="XY",parental = "calc",env=FALSE,
max.pars = 4, ret.all=F)
if(is.factor(data$cross)){
data$cross <- unlist(lapply(data$cross, as.character))
}
### lets deal with F in sex being treated as FALSE
if(is.logical(data$sex)){
data$sex <- rep("F", length(data$sex))
}
# validate the incoming arguments and data
validateData(SCS = SCS, user.data = data, Cmatrix = Cmatrix, messages = messages)
### if no custom matrix is supplied build a cmatrix based
### on the user data and arguments supplied
if(is.null(Cmatrix)){
Cmatrix <- PrepareCmatrix(user.data = data,
SCS = SCS, env = env,
drop.pars = drop.pars,
parental = parental,
Mepi = Mepi)
}
# remove CGEs in the cmatrix that can't be analyzed
cmat.temp <- CleanCmatrix(Cmatrix, messages=messages)
Cmatrix <- cmat.temp[[1]]
crosses <- cmat.temp[[2]]
### report the composite genetic effects being explored
have.data <- paste(colnames(Cmatrix)[-1], collapse = ", ")
if(messages == T) cat(paste("The composite genetic effects that will be tested are: \n",
have.data, "\n", collapse = ", "))
### calcualte the potential size of model space
mod.space.size <- sum(choose(ncol(Cmatrix) -1 , 1:(nrow(Cmatrix) - 2)))
if(!is.null(max.pars)) mod.space.size <- sum(choose((ncol(Cmatrix) -1), 1:max.pars))
if(messages == T){
if(mod.space.size > 5000){
cat(paste("Since there are", mod.space.size,
"possible models this may take a bit:\n"))
}
}
View(Cmatrix)
source('~/Desktop/Dropbox/gitrepos/SAGA2/R/LCA.R')
res2 <- LCA(data=beetle.dat,
SCS="XY",parental = "calc",env=FALSE,
max.pars = 4, ret.all=F)
### analyze the data based on the cmatrix
result <- AnalyzeModels(data = data,
Cmatrix = Cmatrix[,-1],
crosses = crosses,
SCS = SCS,
parental = parental,
env = env,
model.sum = model.sum,
max.models = max.models,
max.pars = max.pars,
ret.all = ret.all,
messages = messages)
##### generate all possible models storing each matrix in a list
# col that could be used
pos.cols <- 2:ncol(Cmatrix)
# store the eqns
eqns <- list()
# index for eqns
counter <- 1
# the maximum allowed parameters
max.par <- nrow(Cmatrix) - 2
# allow user to overide max.par
if(!is.null(max.pars)) max.par <- max.pars
if(messages == T) cat(paste("Generating Models"))
if(length(pos.cols) < max.par){
max.par <- length(pos.cols)
}
# different number of par models
for(i in 1:max.par){
if(messages == T) cat(".")
foo <- combn(pos.cols, i)
# Models are described by a vector of the columns they include
for(j in 1:ncol(foo)){
eqns[[counter]] <- as.vector(foo[,j])
counter <- counter + 1
}
}
# just the setup for a small counter
if(length(eqns) <= 1000) x <- 50
if(length(eqns) > 1000) x <- 500
if(length(eqns) > 10000) x <- 5000
# We need to preallocate these variables
# mod.results, num.pars, dev, aic
mod.results <- vector(mode = "list", length = length(eqns))
num.pars <- dev <- aic <- vector(length=length(eqns))
# we need a counter because redundant models arrise.  These originate because
# some components will have high covariance
# The glm function automatically throws these variables
# resulting in fitting the same model more than once.
counter <- 0
# if the user supplies the matrix make sure it is numeric
if(!is.null(Cmatrix)){
if(is.character(Cmatrix[1, 1])){
class(Cmatrix) <- "numeric"
}
}
for(i in 1:length(eqns)){
# generate the matrix for the current model
test.mat <- as.matrix(Cmatrix[, c(eqns[[i]])])
# TODO put back in: 1,
# in line above:
# test.mat <- as.matrix(Cmatrix[, c(1, eqns[[i]])])
# fit the model weight is equal to the inverse of the square of the SE
temp.mod <- glm(data$mean ~ test.mat, weights = data$SE ^ - 2)
# this if statement will bypass a model with a singularity
# 1 NA will be generated for the line mean any additional are sign of sing.
if(sum(is.na(temp.mod$coef)) < 2){
counter <- counter + 1
# name model results as eqns
mod.results[[counter]] <- temp.mod
names(mod.results)[counter] <- i
# record the number of parameters in the model
num.pars[counter] <- length(mod.results[[counter]]$coefficients) - 1
# record the residual deviances
dev[counter] <- mod.results[[counter]]$dev
# record the AIC of the models
aic[counter] <- mod.results[[counter]]$aic
}
if(messages == T) if(i / x == round(i / x)) cat(paste("\n", i))
}
# Get rid of excess preallocation
mod.results <- mod.results[1:counter]
num.pars <- num.pars[1:counter]
length(mod.results[[counter]]$coefficients)
mod.results[[counter]]$coefficients
source('~/Desktop/Dropbox/gitrepos/SAGA2/R/AnalyzeModels.R')
res2 <- LCA(data=beetle.dat,
SCS="XY",parental = "calc",env=FALSE,
max.pars = 4, ret.all=F)
# different number of par models
for(i in 1:max.par){
if(messages == T) cat(".")
foo <- combn(pos.cols, i)
# Models are described by a vector of the columns they include
for(j in 1:ncol(foo)){
eqns[[counter]] <- as.vector(foo[,j])
counter <- counter + 1
}
}
# just the setup for a small counter
if(length(eqns) <= 1000) x <- 50
if(length(eqns) > 1000) x <- 500
if(length(eqns) > 10000) x <- 5000
# We need to preallocate these variables
# mod.results, num.pars, dev, aic
mod.results <- vector(mode = "list", length = length(eqns))
num.pars <- dev <- aic <- vector(length=length(eqns))
# we need a counter because redundant models arrise.  These originate because
# some components will have high covariance
# The glm function automatically throws these variables
# resulting in fitting the same model more than once.
counter <- 0
# if the user supplies the matrix make sure it is numeric
if(!is.null(Cmatrix)){
if(is.character(Cmatrix[1, 1])){
class(Cmatrix) <- "numeric"
}
}
for(i in 1:length(eqns)){
# generate the matrix for the current model
test.mat <- as.matrix(Cmatrix[, c(eqns[[i]])])
# TODO put back in: 1,
# in line above:
# test.mat <- as.matrix(Cmatrix[, c(1, eqns[[i]])])
# fit the model weight is equal to the inverse of the square of the SE
temp.mod <- glm(data$mean ~ test.mat, weights = data$SE ^ - 2)
# this if statement will bypass a model with a singularity
# 1 NA will be generated for the line mean any additional are sign of sing.
if(sum(is.na(temp.mod$coef)) < 2){
counter <- counter + 1
# name model results as eqns
mod.results[[counter]] <- temp.mod
names(mod.results)[counter] <- i
# record the number of parameters in the model
num.pars[counter] <- length(mod.results[[counter]]$coefficients) ###### TODO - 1
# record the residual deviances
dev[counter] <- mod.results[[counter]]$dev
# record the AIC of the models
aic[counter] <- mod.results[[counter]]$aic
}
if(messages == T) if(i / x == round(i / x)) cat(paste("\n", i))
}
# Get rid of excess preallocation
mod.results <- mod.results[1:counter]
num.pars <- num.pars[1:counter]
dev <-  dev[1:counter]
aic <- aic[1:counter]
## need to report the number of models thrown out due to
## high covariance ~ singularity
if(messages == T){
if(i > counter){
cat(paste("\n", i - (counter - 1),
" models were removed due to high covariances \n",
"or linear relationships between predictor variables.  \n", "The remaining ",
counter - 1, " models have been evaluated.\n\n", sep = ""))
}
}
aicc <- aic + (((2 * num.pars) * (num.pars + 1)) /
(nrow(data) - num.pars))
daicc <- aicc - min(aicc)
# this code correctly produces akaike weights
waic <- (exp(-.5 * daicc)) / (sum(exp(-.5 * daicc)))
new.waic <- waic
new.waic.names <- eqns[as.numeric(names(mod.results))]
# so now we have a copy of the waics to play with
new.vars <- matrix(0,(ncol(Cmatrix)),2)  ##TODO removed "-1" after "ncol(Cmatrix)
new.vars[,1] <- colnames(Cmatrix)[1:ncol(Cmatrix)]
for(i in 1:nrow(new.vars)){
for(j in 1:length(new.waic)){
if((i+1) %in% new.waic.names[[j]]){
new.vars[i,2] <- as.numeric(new.vars[i,2]) + new.waic[j]
}
}
}
# lets calculate the 95% probability set of models
best.models <- list()
counter <- i <- 0
good.model.waics <- vector()
while(counter < model.sum){
i <- i + 1
counter <- counter + waic[order(waic, decreasing = T, na.last = F)][i]
good.model.waics[i] <- waic[order(waic, decreasing = T, na.last = F)][i]
}
best.models.ind <- order(waic, decreasing = T, na.last = F)[1:i]
best.models <- mod.results[best.models.ind]
if(messages == T){
cat(paste("\nAICc weights were used to select the minimum number of models ",
"whose weights sum \nto greater than ",
model.sum * 100, "% this model set includes ", length(best.models),
" model(s)\n", sep = ""))
}
#lets calculate variable importance
#which equations are being used
best.eqns <- eqns[as.numeric(names(best.models))]
best.eqns.w <- waic[sort(best.models.ind)]
# now we need to print the model weighted averages and SE
# lets make a matrix of the calculated values under each model
par.est <- matrix(0, length(best.eqns), ncol(Cmatrix) + 2)
colnames(par.est) <- c('eqn', colnames(Cmatrix), 'mw')
par.est[, 1] <- names(best.models)
par.est[, 2] <- 1
# now we need a 1 or 0  if the parameter is in the eqn
for(i in 1:nrow(par.est)){
bar <- as.numeric(par.est[i, 1])
par.est[i, eqns[[bar]] + 1] <- 1
}
# now replace 1's with the parameter estimate for each variable
for(i in 1:nrow(par.est)){
bar <- best.models[[i]]$coefficients[-2]
counter <- 0
for(j in 2:ncol(par.est)){
if(par.est[i, j] == 1){
counter <- counter + 1
par.est[i, j] <- bar[counter]
}
}
}
# add in the aicw
# best.models has eqn lookup in waic
names(waic) <- names(mod.results)
for(i in 1:nrow(par.est)){
par.est[i, ncol(par.est)] <- waic[names(waic) == par.est[i, 1]]
}
# recalculate model waic to sum to 1
par.est[, 'mw'] <- as.numeric(par.est[, 'mw']) /
sum(as.numeric(par.est[, 'mw']))
# calculate the model weighted parameter estimates
par.est <- rbind(par.est, rep(0,ncol(par.est)))
for(i in 2:(ncol(par.est)-1)){
par.est[nrow(par.est), i] <- sum(as.numeric(par.est[1:nrow(par.est)-1, i]) *
as.numeric(par.est[1:nrow(par.est)-1, 'mw']))
}
par.est[nrow(par.est), 1] <- 'mw.avg'
# now lets calculate the unconditional variances as proposed in burnham and
# anderson 2002 pg 162
# so lets duplicate table par.est to use to fill in our values
var.est <- par.est
# lets loop through models first with i ... the rows
for(i in 1:(nrow(var.est) - 1)){
counter <- 0
mod.vars <- diag(vcov(best.models[[which(names(best.models) ==
var.est[i, 1])]],
complete = FALSE))
# now lets loop through parameters with j ... the columns
for(j in 2:(ncol(var.est) - 1)){
if(var.est[i, j] != 0){
counter <- counter + 1
var.est[i,j] <- mod.vars[counter]
}
}
}
View(var.est)
View(Cmatrix)
colnames(Cmatrix)
colnames(Cmatrix)[c(2,10,13,24)]
cmat <- Cmatrix[,c(2,10,13,24)]
data$mean
fit.foo<-glm(data$mean ~ cmat, weights = data$SE ^ - 2)
fit.foo<-glm(data$mean ~ as.matrix(cmat), weights = data$SE ^ - 2)
summary(fit.foo)
PseudoR2(fit.foo)
fit.foo<-lm(data$mean ~ as.matrix(cmat), weights = data$SE ^ - 2)
summary(fit.foo)
help(PseudoR2)
PseudoR2(fit.foo, which="McFaddenAdj")
PseudoR2(fit.foo, which="CoxSnell")
fit.foo<-glm(data$mean ~ as.matrix(cmat), weights = data$SE ^ - 2)
PseudoR2(fit.foo, which="CoxSnell")
PseudoR2(fit.foo, which="Nagelkerke")
PseudoR2(fit.foo, which="AldrichNelson")
PseudoR2(fit.foo, which="VeallZimmermann")
PseudoR2(fit.foo, which="Efron")
PseudoR2(fit.foo, which="McKelveyZavoina")
PseudoR2(fit.foo, which="Tjur")
PseudoR2(fit.foo, which="all")
setwd("~/Desktop/Dropbox/projects/dispersal/rscripts")
library(SAGA2)
########################## Untransformed Data #######################
beetle.dat <- read.csv("../data/saga.single.val.data.csv")
load("~/Desktop/Dropbox/projects/dispersal/results/LCA.RData")
library(DescTools)
PseudoR2(res[[1]], which = "Cox")
PseudoR2(res$best.models[[1]], which = "Cox")
for(i in 1:10){
print(PseudoR2(res$best.models[[i]], which = "Cox"))
}
library(DescTools)
for(i in 1:10){
print(PseudoR2(res$best.models[[i]], which = "Efron"))
}
res2 <- LCA(data=beetle.dat,
SCS="XY",parental = "calc",env=FALSE,
max.pars = 4, ret.all=F)
res2$all.models
res2 <- LCA(data=beetle.dat,
SCS="XY",parental = "calc",env=FALSE,
max.pars = 4, ret.all=T)
res2$all.models[[1]]
PseudoR2(res2$all.models[[1]], which="Cox")
res2$cmatrix
lm(beetle.dat$mean~res2$cmatrix[,3], weights = beetle.dat$SE)
summary(lm(beetle.dat$mean~res2$cmatrix[,3], weights = beetle.dat$SE))
summary(lm(beetle.dat$mean~res2$cmatrix[,3], weights = 1/beetle.dat$SE))
4 ^ - 2
1/4
summary(lm(beetle.dat$mean~res2$cmatrix[,3], weights = beetle.dat$SE^-2))
colnames(res2$cmatrix)
summary(lm(beetle.dat$mean~res2$cmatrix[,3], weights = beetle.dat$SE^-2))
summary(lm(beetle.dat$mean~res2$cmatrix[,c(3,14)], weights = beetle.dat$SE^-2))
res2$cmatrix[,c(3,14)]
lm(beetle.dat$mean~res2$cmatrix[,c(3,14)], weights = beetle.dat$SE^-2)
summary(glm(beetle.dat$mean~res2$cmatrix[,c(3,14)], weights = beetle.dat$SE^-2))
summary(lm(beetle.dat$mean~res2$cmatrix[,3], weights = beetle.dat$SE^-2))
summary(lm(beetle.dat$mean~as.matrix(res2$cmatrix[,c(3,14)]), weights = beetle.dat$SE^-2))
summary(lm(beetle.dat$mean~as.matrix(res2$cmatrix[,c(3,14,11)]), weights = beetle.dat$SE^-2))
summary(lm(beetle.dat$mean~as.matrix(res2$cmatrix[,c(3,14,11,25)]), weights = beetle.dat$SE^-2))
summary(lm(beetle.dat$mean~res2$cmatrix[,3], weights = beetle.dat$SE^-2))
dat <- read.csv("../results/expected.comp.csv", row.names = 1)
line <- c("P1", "P2", "F1", "rF1", "BC1", "BC2", "rBC1", "rBC2")
Cols <- c("lightskyblue", "deeppink3", "darkorchid1", "darkorchid3",
"dodgerblue", "red", "dodgerblue4", "red4")
dat <- read.csv("../results/expected.comp.csv", row.names = 1)
line <- c("P1",           "P2",        "F1",          "rF1",         "BC1",        "BC2", "rBC1",        "rBC2")
Cols <- c("lightskyblue", "deeppink3", "darkorchid1", "darkorchid3", "dodgerblue", "red", "dodgerblue4", "red4")
View(dat)
line <- c("P1",           "P2",        "F1",          "rF1",         "BC1",        "BC2", "rBC1",        "rBC2")
Cols <- c("lightskyblue", "deeppink3", "darkorchid1", "darkorchid3", "dodgerblue", "red", "dodgerblue4", "black")
objitter <- rep(0,8)
objitter[c(4,6)] <- -3.2
jitter <- rep(3.3, 8)
jitter[c(3,8)] <- 7.5
plot(x=dat$perc.p2+objitter, y=dat$obsvd, col=Cols, pch=16,xlim=c(0,103),
ylim=c(0,1), xlab="Proportion P2 (Disperser) Genome",ylab="Proportion of Dispersers")
points(x=dat$perc.p2+jitter, y=dat$best, col=Cols, pch=17)
plot(x=dat$perc.p2+objitter, y=dat$obsvd, col=Cols, pch=16,xlim=c(0,103),cex=.1
ylim=c(0,1), xlab="Proportion P2 (Disperser) Genome",ylab="Proportion of Dispersers")
plot(x=dat$perc.p2+objitter, y=dat$obsvd, col=Cols, pch=16,xlim=c(0,103),cex=.1,
ylim=c(0,1), xlab="Proportion P2 (Disperser) Genome",ylab="Proportion of Dispersers")
points(x=dat$perc.p2+jitter, y=dat$best, col=Cols, pch=17,cex=.1)
